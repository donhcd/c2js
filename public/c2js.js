// Generated by CoffeeScript 1.4.0
(function() {
  var compile, copy_parens_inside, copy_parens_inside_rplc_var, copy_til_semi, orderedthings, preprocess, replace_things, s, sprintf, things, type, types, _i, _len,
    __slice = [].slice;

  s = "int fib(int i) {  int f1=0;  int f2=1;  int q=0;  while (q<i-1) {    int tmp = f2;    f2 = f1+f2;    f1 = tmp;    q = q+1;  }  return f1;}int main(){  printf(\"%d\",fib(7));  return 0;}";

  sprintf = 
function () {
  function str_repeat(j, c) {
    for (var o = []; c > 0; o[--c] = j);
    return o.join('');
  }

  var i = 0, a, f = arguments[i++], o = [], m, p, c, x, s = '';
  while (f) {
    if (m = /^[^\x25]+/.exec(f)) {
      o.push(m[0]);
    }
    else if (m = /^\x25{2}/.exec(f)) {
      o.push('%');
    }
    else if (m = /^\x25(?:(\d+)\$)?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(f)) {
      if (((a = arguments[m[1] || i++]) == null) || (a == undefined)) {
        throw('Too few arguments.');
      }
      if (/[^s]/.test(m[7]) && (typeof(a) != 'number')) {
        throw('Expecting number but found ' + typeof(a));
      }
      switch (m[7]) {
        case 'b': a = a.toString(2); break;
        case 'c': a = String.fromCharCode(a); break;
        case 'd': a = parseInt(a); break;
        case 'e': a = m[6] ? a.toExponential(m[6]) : a.toExponential(); break;
        case 'f': a = m[6] ? parseFloat(a).toFixed(m[6]) : parseFloat(a); break;
        case 'o': a = a.toString(8); break;
        case 's': a = ((a = String(a)) && m[6] ? a.substring(0, m[6]) : a); break;
        case 'u': a = Math.abs(a); break;
        case 'x': a = a.toString(16); break;
        case 'X': a = a.toString(16).toUpperCase(); break;
      }
      a = (/[def]/.test(m[7]) && m[2] && a >= 0 ? '+'+ a : a);
      c = m[3] ? m[3] == '0' ? '0' : m[3].charAt(1) : ' ';
      x = m[5] - String(a).length - s.length;
      p = m[5] ? str_repeat(c, x) : '';
      o.push(s + (m[4] ? a + p : p + a));
    }
    else {
      throw('Huh ?!');
    }
    f = f.substring(m[0].length);
  }
  return o.join('');
};

  window.printf = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    s = sprintf.apply(null, args);
    return alert(s);
  };

  window.malloc = function() {
    return {};
  };

  window.calloc = function() {
    return {};
  };

  window.sizeof = function() {
    return 8;
  };

  types = ["int", "var"];

  things = {
    '\\(': ' ( ',
    '\\)': ' ) ',
    '{': ' { ',
    '}': ' } ',
    '=': ' = ',
    '-': ' - ',
    '>': ' > ',
    '<': ' < ',
    '\\+': ' + ',
    '\\*': ' * ',
    '/': ' / ',
    ';': ' ; ',
    ',': ' , ',
    '[+]\\s*[+]': ' ++ ',
    '-\\s*-': ' -- ',
    '[+]\\s*=': ' += ',
    '-\\s*=': ' -= ',
    '[*]\\s*=': ' *= ',
    '[/]\\s*=': ' /= ',
    'NULL': 'null',
    "=\\s*{([^;]*)}\\s*;": ' = [ $1 ] ; '
  };

  orderedthings = ['\\(', '\\)', '{', '}', '=', '-', '>', '<', '\\+', '\\*', '/', ';', ',', '[+]\\s*[+]', '-\\s*-', '[+]\\s*=', '-\\s*=', '[*]\\s*=', '[/]\\s*=', 'NULL'];

  for (_i = 0, _len = types.length; _i < _len; _i++) {
    type = types[_i];
    orderedthings.push("([^_A-Za-z])" + type + "[\\s*]*([_A-Za-z]+)(\\s*\\[\\s*\\d*\\s*\\])+");
    things["([^_A-Za-z])" + type + "[\\s*]*([_A-Za-z]+)(\\s*\\[\\s*\\d*\\s*\\])+"] = ' var $2 ';
    orderedthings.push("([^_A-Za-z])" + type + "[\\s*]*");
    things["([^_A-Za-z])" + type + "[\\s*]*"] = ' var ';
  }

  orderedthings.push("=\\s*{([^;]*)}\\s*;");

  replace_things = function(s) {
    var replacement, thing, _j, _len1;
    for (_j = 0, _len1 = orderedthings.length; _j < _len1; _j++) {
      thing = orderedthings[_j];
      replacement = things[thing];
      s = s.replace(RegExp(thing, 'g'), replacement);
    }
    return s;
  };

  copy_til_semi = function(output, tokens) {
    var i;
    i = 0;
    while (tokens[i] !== ';') {
      output.push(tokens[i]);
      i++;
    }
    output.push(';');
    i++;
    return i;
  };

  copy_parens_inside = function(output, tokens) {
    var i, oparen_count;
    i = 1;
    output.push('(');
    oparen_count = 1;
    while (oparen_count > 0) {
      switch (tokens[i]) {
        case '(':
          oparen_count++;
          break;
        case ')':
          oparen_count--;
      }
      output.push(tokens[i]);
      i++;
    }
    return i;
  };

  copy_parens_inside_rplc_var = function(output, tokens) {
    var i, oparen_count;
    i = 1;
    output.push('(');
    oparen_count = 1;
    while (oparen_count > 0) {
      switch (tokens[i]) {
        case '(':
          oparen_count++;
          break;
        case ')':
          oparen_count--;
      }
      if (tokens[i] === 'var') {
        output.push('var');
      } else {
        output.push(tokens[i]);
      }
      i++;
    }
    return i;
  };

  preprocess = function(code) {
    code = (" " + code).replace(/\/\*.*\*\//g, '');
    code = code.replace(/\/\/.*\n/g, '');
    code = code.replace(/\n#.*\n/g, '\n');
    return code;
  };

  compile = function(c_code) {
    var close_brackets, i, output, outputstr, put, tokens, _j, _len1;
    output = [];
    c_code = preprocess(c_code);
    c_code = replace_things(c_code);
    console.log(c_code);
    tokens = c_code.split(" ");
    tokens = tokens.map(function(t) {
      return t.trim();
    });
    tokens = tokens.filter(function(t) {
      return t !== '';
    });
    console.log(tokens);
    close_brackets = [];
    i = 0;
    while (i < tokens.length) {
      if (tokens[i] === 'var') {
        switch (tokens[i + 2]) {
          case '(':
            output.push('function');
            output.push(tokens[i + 1]);
            output.push("(");
            i = i + 3;
            while (tokens[i] !== ')' && tokens[i] !== '{') {
              i++;
              output.push(tokens[i]);
              output.push(',');
              i += 2;
            }
            if (tokens[i] === ')') {
              i++;
            } else {
              output.pop();
            }
            output.push(')');
            close_brackets.push('}');
            output.push('{');
            i++;
            break;
          case '=':
            i++;
            output.push('var');
            output.push(tokens[i]);
            output.push('=');
            i += 2;
            i += copy_til_semi(output, tokens.slice(i));
            break;
          case ';':
            output.push('var');
            i++;
            output.push(tokens[i]);
            output.push(';');
            i += 2;
        }
      } else {
        switch (tokens[i]) {
          case '}':
            output.push(close_brackets.pop());
            i++;
            break;
          case 'while':
            output.push(tokens[i]);
            i += 1;
            i += copy_parens_inside(output, tokens.slice(i));
            if (tokens[i] === '{') {
              output.push('{(function(){');
              close_brackets.push('})();}');
            }
            i++;
            break;
          case 'for':
            i += 1;
            output.push('(function(){');
            output.push('for');
            i += copy_parens_inside_rplc_var(output, tokens.slice(i));
            if (tokens[i] === '{') {
              output.push('{');
              close_brackets.push('}})();');
            }
            i++;
            break;
          case 'if':
            output.push(tokens[i]);
            i += 1;
            i += copy_parens_inside(output, tokens.slice(i));
            if (tokens[i] === '{') {
              output.push('{(function(){');
              close_brackets.push('})();}');
            }
            i++;
            break;
          case 'else':
            output.push(tokens[i]);
            i += 1;
            i += copy_parens_inside(output, tokens.slice(i));
            if (tokens[i] === '{') {
              output.push('{(function(){');
              close_brackets.push('})();}');
            }
            i++;
            break;
          default:
            i += copy_til_semi(output, tokens.slice(i));
        }
      }
    }
    outputstr = '';
    for (_j = 0, _len1 = output.length; _j < _len1; _j++) {
      put = output[_j];
      outputstr += put + ' ';
    }
    return outputstr;
  };

  window.compile = compile;

}).call(this);
