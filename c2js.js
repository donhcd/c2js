// Generated by CoffeeScript 1.4.0
(function() {
  var compile, copy_til_semi, printf, replace_things, s, sprintf, things, types,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  s = "int fib(int i) {  int f1=0;  int f2=1;  int q=0;  while (q<i-1) {  ;    int tmp = f2;    f2 = f1+f2;    f1 = tmp;    q=q+1;  }  return f1;}int main(){  int i=0;  while (i<20) {    printf(\"%d\",fib(i));    i=i+1;  }  return 0;}";

  sprintf = function () {
  function str_repeat(j, c) {
    for (var o = []; c > 0; o[--c] = j);
    return o.join('');
  }

	var i = 0, a, f = arguments[i++], o = [], m, p, c, x, s = '';
	while (f) {
		if (m = /^[^\x25]+/.exec(f)) {
			o.push(m[0]);
		}
		else if (m = /^\x25{2}/.exec(f)) {
			o.push('%');
		}
		else if (m = /^\x25(?:(\d+)\$)?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(f)) {
			if (((a = arguments[m[1] || i++]) == null) || (a == undefined)) {
				throw('Too few arguments.');
			}
			if (/[^s]/.test(m[7]) && (typeof(a) != 'number')) {
				throw('Expecting number but found ' + typeof(a));
			}
			switch (m[7]) {
				case 'b': a = a.toString(2); break;
				case 'c': a = String.fromCharCode(a); break;
				case 'd': a = parseInt(a); break;
				case 'e': a = m[6] ? a.toExponential(m[6]) : a.toExponential(); break;
				case 'f': a = m[6] ? parseFloat(a).toFixed(m[6]) : parseFloat(a); break;
				case 'o': a = a.toString(8); break;
				case 's': a = ((a = String(a)) && m[6] ? a.substring(0, m[6]) : a); break;
				case 'u': a = Math.abs(a); break;
				case 'x': a = a.toString(16); break;
				case 'X': a = a.toString(16).toUpperCase(); break;
			}
			a = (/[def]/.test(m[7]) && m[2] && a >= 0 ? '+'+ a : a);
			c = m[3] ? m[3] == '0' ? '0' : m[3].charAt(1) : ' ';
			x = m[5] - String(a).length - s.length;
			p = m[5] ? str_repeat(c, x) : '';
			o.push(s + (m[4] ? a + p : p + a));
		}
		else {
			throw('Huh ?!');
		}
		f = f.substring(m[0].length);
	}
	return o.join('');
};

  printf = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    s = sprintf.apply(null, args);
    return document.body.innerHTML += "<p>" + s + "</p>";
  };

  types = ["int"];

  things = ['\\(', '\\)', '{', '}', '=', '-', '\\+', '\\*', '/', ';', ','];

  replace_things = function(s) {
    var thing, _i, _len;
    for (_i = 0, _len = things.length; _i < _len; _i++) {
      thing = things[_i];
      s = s.replace(RegExp(thing, 'g'), " " + (thing.replace('\\', '')) + " ");
    }
    return s;
  };

  copy_til_semi = function(output, tokens) {
    var i;
    i = 0;
    while (tokens[i] !== ';') {
      output.push(tokens[i]);
      i++;
    }
    output.push(';');
    i++;
    return i;
  };

  compile = function(c_code) {
    var close_brackets, i, output, outputstr, put, tokens, _i, _len, _ref;
    output = [];
    c_code = replace_things(c_code);
    tokens = c_code.split(" ");
    tokens = tokens.filter(function(t) {
      return t.trim() !== '';
    });
    close_brackets = [];
    i = 0;
    while (i < tokens.length) {
      if (_ref = tokens[i], __indexOf.call(types, _ref) >= 0) {
        switch (tokens[i + 2]) {
          case '(':
            output.push('function');
            output.push(tokens[i + 1]);
            output.push("(");
            i = i + 3;
            while (tokens[i] !== ')' && tokens[i] !== '{') {
              i++;
              output.push(tokens[i]);
              output.push(',');
              i += 2;
            }
            if (tokens[i] === ')') {
              i++;
            } else {
              output.pop();
            }
            output.push(')');
            close_brackets.push('}');
            output.push('{');
            i++;
            break;
          case '=':
            i++;
            output.push('var');
            output.push(tokens[i]);
            output.push('=');
            i += 2;
            i += copy_til_semi(output, tokens.slice(i));
            break;
          case ';':
            output.push('var');
            i++;
            output.push(tokens[i]);
            output.push(';');
            i += 2;
        }
      } else {
        switch (tokens[i]) {
          case '}':
            output.push('}');
            i++;
            break;
          default:
            i += copy_til_semi(output, tokens.slice(i));
        }
      }
    }
    outputstr = '';
    for (_i = 0, _len = output.length; _i < _len; _i++) {
      put = output[_i];
      outputstr += put + ' ';
    }
    return outputstr;
  };

  eval(compile(s));

  main();

}).call(this);
